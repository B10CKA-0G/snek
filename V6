<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AI Snake Game</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 20px;
      background-color: black;
      color: white;
    }
    .game-container {
      display: inline-block;
      border: 2px solid white;
      width: 400px;
      height: 400px;
      position: relative;
      margin-bottom: 20px;
    }
    .cell {
      width: 20px;
      height: 20px;
      background-color: black;
      display: inline-block;
    }
    .snake {
      background-color: #064e3b;
    }
    .food {
      background-color: #4ade80;
    }
    #controls {
      margin-top: 10px;
    }
    .stats {
      font-size: 14px;
    }
  </style>
</head>
<body>
  <h1>AI Snake Game</h1>
  <div class="game-container" id="game"></div>
  <div id="controls">
    <label for="speed">Speed:</label>
    <input type="range" id="speed" min="1000" max="100" value="500">
    <p>Generations: <span id="generation-count">0</span></p>
    <p>Best Score: <span id="best-score">0</span></p>
    <h3>Stats</h3>
    <p>Average Distance to Food: <span id="avg-distance">0</span></p>
    <p>Average Time to Food: <span id="avg-time">0</span></p>
    <p>Average Snake Length: <span id="avg-length">0</span></p>
  </div>

  <script>
    const GRID_SIZE = 20;
    let interval = 500;
    const gameEl = document.getElementById('game');
    const speedInput = document.getElementById('speed');
    const generationDisplay = document.getElementById('generation-count');
    const bestScoreDisplay = document.getElementById('best-score');
    const avgDistanceDisplay = document.getElementById('avg-distance');
    const avgTimeDisplay = document.getElementById('avg-time');
    const avgLengthDisplay = document.getElementById('avg-length');

    let generation = 0;
    let bestScore = 0;

    let snake = [{ x: 10, y: 10 }];
    let direction = { x: 1, y: 0 };
    let food = getRandomPosition();
    let intervalId;

    let weights = randomWeights();

    let totalDistance = 0;
    let totalTime = 0;
    let totalLength = 0;
    let foodCount = 0;
    let timeSinceLastFood = 0;

    speedInput.addEventListener('input', () => {
      interval = parseInt(speedInput.value);
      clearInterval(intervalId);
      intervalId = setInterval(step, interval);
    });

    function randomWeights() {
      return [Math.random() * 2 - 1, Math.random() * 2 - 1];
    }

    function mutateWeights(w) {
      return w.map(v => v + (Math.random() * 0.4 - 0.2));
    }

    function getRandomPosition() {
      return {
        x: Math.floor(Math.random() * GRID_SIZE),
        y: Math.floor(Math.random() * GRID_SIZE),
      };
    }

    function equal(a, b) {
      return a.x === b.x && a.y === b.y;
    }

    function render() {
      gameEl.innerHTML = '';
      for (let y = 0; y < GRID_SIZE; y++) {
        for (let x = 0; x < GRID_SIZE; x++) {
          const cell = document.createElement('div');
          cell.classList.add('cell');
          const pos = { x, y };
          if (snake.some(part => equal(part, pos))) cell.classList.add('snake');
          else if (equal(pos, food)) cell.classList.add('food');
          gameEl.appendChild(cell);
        }
      }
      generationDisplay.textContent = generation;
      bestScoreDisplay.textContent = bestScore;
      avgDistanceDisplay.textContent = (totalDistance / (foodCount || 1)).toFixed(2);
      avgTimeDisplay.textContent = (totalTime / (foodCount || 1)).toFixed(2);
      avgLengthDisplay.textContent = (totalLength / (generation || 1)).toFixed(2);
    }

    function getNextDirectionAI() {
      const head = snake[0];
      const options = [
        { x: head.x + 1, y: head.y, dir: { x: 1, y: 0 } },
        { x: head.x - 1, y: head.y, dir: { x: -1, y: 0 } },
        { x: head.x, y: head.y + 1, dir: { x: 0, y: 1 } },
        { x: head.x, y: head.y - 1, dir: { x: 0, y: -1 } }
      ];

      let best = null;
      let bestScore = -Infinity;

      for (const option of options) {
        const dx = food.x - option.x;
        const dy = food.y - option.y;
        const score = weights[0] * -Math.abs(dx) + weights[1] * -Math.abs(dy);

        if (!isCollision(option) && score > bestScore) {
          best = option.dir;
          bestScore = score;
        }
      }

      return best || direction; // Default to current direction if no valid option
    }

    function isCollision(pos) {
      return (
        pos.x < 0 ||
        pos.y < 0 ||
        pos.x >= GRID_SIZE ||
        pos.y >= GRID_SIZE ||
        snake.some(part => equal(part, pos))
      );
    }

    function mutateAI() {
      generation++;
      bestScore = Math.max(bestScore, snake.length);
      weights = mutateWeights(weights);
      totalLength += snake.length;
      snake = [{ x: 10, y: 10 }];
      direction = { x: 1, y: 0 };
      food = getRandomPosition();
      timeSinceLastFood = 0;
    }

    function step() {
      direction = getNextDirectionAI();
      const newHead = {
        x: snake[0].x + direction.x,
        y: snake[0].y + direction.y,
      };

      if (isCollision(newHead)) {
        mutateAI();
        render();
        return;
      }

      snake.unshift(newHead);
      timeSinceLastFood++;

      if (equal(newHead, food)) {
        const dx = food.x - newHead.x;
        const dy = food.y - newHead.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        totalDistance += distance;
        totalTime += timeSinceLastFood;
        foodCount++;
        food = getRandomPosition();
        timeSinceLastFood = 0;
      } else {
        snake.pop();
      }

      render();
    }

    render();
    intervalId = setInterval(step, interval);
  </script>
</body>
</html>
